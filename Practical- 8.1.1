Implementation of directed graph and its operations using adjacent lists.


#include<stdio.h>
#include<stdlib.h>
#include "GraphsAdjacencyListDirectedGraph.c" 

void main() {
	int x, op;
	int N,E,s,d,i,j;
	GNODE p,q;
	printf("Enter the number of vertices : ");
	scanf("%d",&N);
	printf("Enter the number of edges : ");
	scanf("%d",&E);
	for(i=1;i<=E;i++) {
		printf("Enter source : ");
		scanf("%d",&s);
		printf("Enter destination : ");
		scanf("%d",&d);
		q=(GNODE)malloc(sizeof(struct node));
		q->vertex=d;
		q->next=NULL;
		if(graph[s]==NULL)
			graph[s]=q;
		else {
			p=graph[s];
			while(p->next!=NULL)
				p=p->next;
			p->next=q;
		}
	}
	while(1) {
		printf("1.Insert vertex 2.Insert edge 3.Delete vertex 4.Delete edge 5.Print adjacency list 6.Exit\n");
		printf("Enter your option : ");
		scanf("%d", &op);
		switch(op) {
			case 1:	
					insertVertex(&N);
					break;
			case 2:
					insertEdge(&N);
					break;
			case 3: 
					deleteVertex(&N);
					break;
			case 4:
					deleteEdge(&N);
					break;
			case 5:
					print(&N);
					break;
			case 6:
					exit(0);
		}
	}
}


#include<stdio.h>
#include<stdlib.h>

#define MAX 100

typedef struct node {
	int vertex;
	struct node *next;
} *GNODE;
GNODE graph[MAX];
void insertVertex(int *N);
void insertEdge(int *N);
void deleteVertex(int *N);
void deleteEdge(int *N);
void print(int *N);
// Function to insert a new vertex
void insertVertex(int *N) {
	(*N)++;
	graph[*N] = NULL;
	printf("Vertex inserted: %d\n", *N);
}
void insertEdge(int *N) {
	int s, d;
	GNODE q, p;
	printf("Enter the source vertex of the edge : ");
	scanf("%d", &s);
	printf("Enter the destination vertex of the edge : ");
	scanf("%d", &d);
	if (s > *N || d > *N || s <= 0 || d <= 0) {
		printf("Invalid vertex.\n");
		return;
	}
	q = (GNODE)malloc(sizeof(struct node));
	q->vertex = d;
	q->next = NULL;
	if (graph[s] == NULL) {
